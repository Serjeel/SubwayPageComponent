{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;ACnBqB;;AAEpC,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,sDAAsD,WAAW,IAAI;AACrE,8CAA8C,YAAY;AAC1D,uCAAuC,UAAU;AACjD;AACA;AACA,uDAAuD,IAAI,IAAI,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;AC3BoB;;AAEnC,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;;ACbqB;AACF;;AAElC,wBAAwB,kDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,iDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;AC5GoB;;AAEnC,6BAA6B,kDAAS;AACtC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,wDAAwD;AAClG,sBAAsB,EAAE,IAAI,mBAAmB;AAC/C;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;AChDoB;;AAEnC,uBAAuB,kDAAS;AAChC;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,wCAAwC,MAAM;AAC9C,8CAA8C,YAAY;AAC1D,uCAAuC,UAAU;AACjD,8CAA8C,iBAAiB;AAC/D;AACA;AACA,uDAAuD,EAAE,IAAI,WAAW;AACxE;AACA;AACA;AACA;AACA,0EAA0E,EAAE;AAC5E,0EAA0E,EAAE,UAAU,mBAAmB;AACzG,uEAAuE,EAAE;AACzE;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;;AC9BqB;AACE;;AAEtC,0BAA0B,kDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,mDAAU;AACzC;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,2BAA2B;AAC3E;AACA;AACA;AACA,iDAAiD,4BAA4B;AAC7E;AACA;AACA;AACA,sDAAsD;AACtD,0DAA0D;AAC1D;AACA;AACA;AACA,kDAAkD;AAClD,sDAAsD;AACtD;AACA;AACA;AACA,mDAAmD;AACnD,wDAAwD;AACxD;AACA,gEAAgE,wBAAwB;AACxF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+EAA+E,yBAAyB;AACxG;AACA;AACA,wDAAwD;AACxD,2EAA2E;AAC3E;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,mDAAmD;AACzF,sBAAsB,EAAE,IAAI,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kEAAkE;AAClE,6FAA6F;AAC7F;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;ACtUoB;;AAEnC,oBAAoB,kDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D,gCAAgC,mDAAmD;AACnF,0BAA0B,qDAAqD,IAAI,WAAW;AAC9F,8CAA8C,YAAY;AAC1D,6CAA6C,YAAY;AACzD,0DAA0D,QAAQ;AAClE;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;UC/Gf;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNoC;AACE;AACF;AACU;AACN;AACZ;;AAE5B,kBAAkB,kDAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,8BAA8B,mDAAU;AACxC,kCAAkC,uDAAc;AAChD;AACA,qCAAqC;AACrC,SAAS;AACT,yBAAyB,8CAAK;AAC9B;AACA,oCAAoC,0BAA0B;AAC9D;AACA,oCAAoC,0BAA0B;AAC9D;AACA,oCAAoC,0BAA0B;AAC9D;AACA,4CAA4C,kCAAkC;AAC9E;AACA,6CAA6C,mCAAmC;AAChF;AACA,sCAAsC,4BAA4B;AAClE,0CAA0C,gCAAgC;AAC1E;AACA,yCAAyC,+BAA+B;AACxE;AACA,6CAA6C;AAC7C,SAAS;AACT,6BAA6B,kDAAS;AACtC;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA,oCAAoC,0BAA0B;AAC9D;AACA,oCAAoC,0BAA0B;AAC9D,4CAA4C,kCAAkC;AAC9E,sCAAsC,4BAA4B;AAClE,0CAA0C,gCAAgC;AAC1E,SAAS;AACT,+BAA+B,oDAAW;AAC1C;AACA,4CAA4C,kCAAkC;AAC9E;AACA,6CAA6C,mCAAmC;AAChF;AACA,0CAA0C,gCAAgC;AAC1E;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA,yCAAyC,+BAA+B;AACxE;AACA,wCAAwC,8BAA8B;AACtE;AACA,uCAAuC,6BAA6B;AACpE;AACA,oCAAoC,0BAA0B;AAC9D;AACA,oCAAoC,0BAA0B;AAC9D;AACA,0CAA0C,gCAAgC;AAC1E;AACA,oCAAoC,0BAA0B;AAC9D;AACA,6CAA6C;AAC7C,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA,cAAc;AACd;AACA,UAAU;AACV;AACA;AACA;;AAEA,iEAAe,GAAG,EAAC;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA,E","sources":["webpack://subwaypagecomponent/./src/Component.js","webpack://subwaypagecomponent/./src/Ingredient.js","webpack://subwaypagecomponent/./src/MainHeader.js","webpack://subwaypagecomponent/./src/MenuBlock.js","webpack://subwaypagecomponent/./src/MenuCategories.js","webpack://subwaypagecomponent/./src/MenuItem.js","webpack://subwaypagecomponent/./src/ModalWindow.js","webpack://subwaypagecomponent/./src/Order.js","webpack://subwaypagecomponent/webpack/bootstrap","webpack://subwaypagecomponent/webpack/runtime/define property getters","webpack://subwaypagecomponent/webpack/runtime/hasOwnProperty shorthand","webpack://subwaypagecomponent/webpack/runtime/make namespace object","webpack://subwaypagecomponent/./src/App.js"],"sourcesContent":["class Component {\n    constructor(data = {}) {\n        let handler = {\n            set: this.handleDataChange.bind(this)\n        }\n        this.data = new Proxy(data, handler)\n    }\n\n    handleDataChange(item, property, value) {\n        item[property] = value\n        this.rerender(this.data)\n        return true\n    }\n\n    setRerender(callback) {\n        this.rerender = callback;\n    }\n}\n\nexport default Component","import Component from \"./Component\";\n\nclass Ingredient extends Component {\n    constructor(props) {\n        super();\n        this.tabReadyContent = props.tabReadyContent;\n    }\n    render(item, key) {\n        return (/*html*/`\n            <div class=${this.tabReadyContent.sizes === item.name ||\n                this.tabReadyContent.breads === item.name ||\n                this.tabReadyContent.vegetables.includes(item.name) ||\n                this.tabReadyContent.sauces.includes(item.name) ||\n                this.tabReadyContent.fillings.includes(item.name)\n                ? \"modal-item-active\" : \"modal-item\"} id=\"item-${key}\">\n                <img class=\"item-image\" src=${item.image} />\n                <p class=\"item-name\">${item.name}</p>\n                <div class=\"item-price-block\">\n                    <p class=\"price-text\">Цена:</p>\n                    <p class=\"price-value\" id=\"price-${key}\">${item.price}</p>\n                    <p class=\"price-currency\">руб.</p>\n                </div>\n            </div> \n      `)\n    }\n}\n\nexport default Ingredient","import Component from \"./Component\"\n\nclass MainHeader extends Component{\n    constructor() {\n        super();\n    }\n    render() {\n        return (/*html*/`\n            <h1 class=\"main-header\">СДЕЛАЙТЕ ЗАКАЗ НАПРЯМУЮ ИЗ РЕСТОРАНА</h1>\n      `)\n    }\n}\n\nexport default MainHeader","import Component from \"./Component\";\nimport MenuItem from \"./MenuItem\";\n\nclass MenuBlock extends Component {\n    constructor(props) {\n        super()\n        this.countersValue = props.countersValue;\n        this.items = props.items;\n        this.selectedTab = props.selectedTab;\n        this.orderItems = props.orderItems;\n        this.totalPrice = props.totalPrice;\n\n        this.setSelectedModalTab = props.setSelectedModalTab;\n        this.setModalContent = props.setModalContent;\n        this.setModalWindowAddShow = props.setModalWindowAddShow;\n        this.setCountersValue = props.setCountersValue;\n        this.setOrderItems = props.setOrderItems;\n        this.setTotalPrice = props.setTotalPrice;\n    }\n\n    // Далее что нужно сделать:\n    // 1. Разделить css файлы для каждого компонента\n\n    enable() {\n        for (let i = 0; i < this.items.length; i++) {\n            if (this.items[i] && this.items[i].category !== this.selectedTab) {\n                continue;\n            }\n\n            const handlePlusClick = () => {\n                this.countersValue[i] += 1;\n                this.setCountersValue(this.countersValue)\n            }\n\n            const handleMinusClick = () => {\n                if (this.countersValue[i] > 1) {\n                    this.countersValue[i] -= 1;\n                    this.setCountersValue(this.countersValue)\n                }\n            }\n\n            const handleInputChange = () => {\n                this.countersValue[i] = parseInt(document.getElementById(\"counter-\" + (i + 1)).value);\n                this.setCountersValue(this.countersValue);\n            }\n\n            const handleButtonClick = () => {\n                if (this.selectedTab === \"sandwiches\") {\n                    this.setSelectedModalTab(\"sizes\");\n                    this.setModalWindowAddShow(true);\n                    this.setModalContent({\n                        id: i + 1,\n                        title: this.items[i].name,\n                        amount: this.countersValue[i],\n                        price: this.items[i].price\n                    });\n                } else {\n                    this.orderItems.push({\n                        id: this.orderItems.length + 1,\n                        title: this.items[i].name,\n                        amount: this.countersValue[i],\n                        price: this.items[i].price * this.countersValue[i]\n                    });\n                    this.setOrderItems(this.orderItems);\n                    this.setTotalPrice(this.totalPrice + (this.items[i].price * this.countersValue[i]))\n                }\n            }\n\n            document.getElementById(\"plus-\" + (i + 1)).addEventListener(\"click\", handlePlusClick)\n            document.getElementById(\"minus-\" + (i + 1)).addEventListener(\"click\", handleMinusClick)\n            document.getElementById(\"counter-\" + (i + 1)).addEventListener(\"change\", handleInputChange)\n            document.getElementById(\"button-\" + (i + 1)).addEventListener(\"click\", handleButtonClick)\n        }\n    }\n\n    loadMenu() {\n        const menuItem = new MenuItem();\n        let items = \"\";\n        let logo = \"\";\n        for (let i in this.items) {\n            if (this.items[i].category !== this.selectedTab) {\n                continue;\n            }\n\n            if (this.items[i].market === \"sfc\") {\n                logo = \"i/South_fried_chicken_logo.png\";\n            } else if (this.items[i].market === \"doner\") {\n                logo = \"i/Doner_logo.png\";\n            } else {\n                logo = \"i/Subway_logo.png\";\n            }\n            items += menuItem.render(this.items[i], parseInt(i) + 1, logo, this.countersValue);\n        }\n\n        return items;\n    }\n\n    render() {\n        return (/*html*/`\n        <div class=\"menu-block\">\n            <div class=\"items-block\">\n            ${this.loadMenu()}\n            </div>\n        </div>\n      `)\n    }\n}\n\nexport default MenuBlock","import Component from \"./Component\"\n\nclass MenuCategories extends Component {\n    constructor(props) {\n        super()\n        this.setSelectedTab = props.setSelectedTab;\n\n        this.selectedTab = props.selectedTab\n\n        this.categories =\n        {\n            pancakes: \"Блины\",\n            shaurma: \"Шаурма\",\n            sandwiches: \"Сэндвичи\",\n            burgers: \"Бургеры\",\n            chicken: \"Курица & Картофель\",\n            salads: \"Тортилья & Салаты\",\n            drinks: \"Напитки & Десерты\"\n        }\n    }\n\n        enable() {\n            for (let i in this.categories) {\n                const category = document.getElementById(i);\n                category.addEventListener('click', this.handleClickCategory.bind(this));\n            }\n        }\n\n        handleClickCategory(target) {\n            if (this.selectedTab !== target.target.id) {\n                this.setSelectedTab(target.target.id);\n            }\n        }\n\n        render() {\n            let menuItems = ``;\n            for (let i in this.categories) {\n                menuItems += `<p class=\"${this.selectedTab === i ? \"category-active\" : \"category\"}\"\n                id=\"${i}\">${this.categories[i]}</p>` \n            }\n            return (/*html*/`\n        <div class=\"menu-categories\">\n            ${menuItems}\n        </div>\n      `)\n        }\n    }\n\nexport default MenuCategories","import Component from \"./Component\"\n\nclass MenuItem extends Component{\n    constructor() {\n        super();\n    }\n    render(item, i, logo, countersValue) {\n        return (/*html*/`\n            <div class=\"item\" id=\"item-${i}\">\n                <img class=\"logo\" src=${logo} />\n                <img class=\"item-image\" src=${item.image} />\n                <p class=\"item-name\">${item.name}</p>\n                <p class=\"item-composition\">${item.description}</p>\n                <div class=\"item-price-block\">\n                    <p class=\"price-text\">Цена:</p>\n                    <p class=\"price-value\" id=\"price-${i}\">${item.price}</p>\n                    <p class=\"price-currency\">руб.</p>\n                </div>\n                <p class=\"item-amount\">Количество</p>\n                <div class=\"amount-block\">\n                    <img class=\"minus-icon\" src=\"i/minus.svg\" id=\"minus-${i}\">\n                    <input class=\"item-counter\" type=\"text\" id=\"counter-${i}\" value=${countersValue[i-1]}>\n                    <img class=\"plus-icon\" src=\"i/plus.svg\" id=\"plus-${i}\">\n                </div>\n                <button class=\"item-button\" id=\"button-${i}\">В КОРЗИНУ</button>\n        </div> \n      `)\n    }\n}\n\nexport default MenuItem","import Component from \"./Component\";\nimport Ingredient from \"./Ingredient\";\n\nclass ModalWindow extends Component {\n    constructor(props) {\n        super();\n        this.ingredients = props.ingredients;\n        this.selectedModalTab = props.selectedModalTab;\n        this.modalContent = props.modalContent;\n        this.tabReadyContent = props.tabReadyContent;\n        this.previousValues = props.previousValues;\n        this.countersValue = props.countersValue;\n        this.orderItems = props.orderItems;\n        this.totalPrice = props.totalPrice;\n        this.sandwichesLength = props.sandwichesLength;\n        this.sandwiches = props.sandwiches;\n        this.modalWindowAddShow = props.modalWindowAddShow;\n        this.modalWindowEditShow = props.modalWindowEditShow;\n        this.changeableOrderItem = props.changeableOrderItem;\n\n        this.setChangeableOrderItem = props.setChangeableOrderItem;\n        this.setSandwiches = props.setSandwiches;\n        this.setSandwichesLength = props.setSandwichesLength;\n        this.setTotalPrice = props.setTotalPrice;\n        this.setOrderItems = props.setOrderItems;\n        this.setCountersValue = props.setCountersValue;\n        this.setPreviousValues = props.setPreviousValues;\n        this.setModalContent = props.setModalContent;\n        this.setTabReadyContent = props.setTabReadyContent;\n        this.setModalWindowAddShow = props.setModalWindowAddShow;\n        this.setModalWindowEditShow = props.setModalWindowEditShow;\n        this.setSelectedModalTab = props.setSelectedModalTab;\n        this.tabs = {\n            sizes: \"Размер\",\n            breads: \"Хлеб\",\n            vegetables: \"Овощи\",\n            sauces: \"Соусы\",\n            fillings: \"Начинка\",\n            ready: \"Готово!\"\n        };\n    }\n\n    enable() {\n        const sizesTabClick = () => {\n            this.setSelectedModalTab(\"sizes\")\n        }\n        const breadsTabClick = () => {\n            this.setSelectedModalTab(\"breads\")\n        }\n        const vegetablesTabClick = () => {\n            this.setSelectedModalTab(\"vegetables\")\n        }\n        const saucesTabClick = () => {\n            this.setSelectedModalTab(\"sauces\")\n        }\n        const fillingsTabClick = () => {\n            this.setSelectedModalTab(\"fillings\")\n        }\n        const readyTabClick = () => {\n            this.setSelectedModalTab(\"ready\")\n        }\n\n        const closeIconClick = () => {\n            this.setPreviousValues({\n                sizes: 0,\n                breads: 0\n            })\n            this.setModalWindowAddShow(false);\n            this.setModalWindowEditShow(false);\n            this.setTabReadyContent({\n                sizes: \"15 См\",\n                breads: \"Белый итальянский\",\n                vegetables: [],\n                sauces: [],\n                fillings: []\n            })\n        }\n\n        document.getElementById(\"sizes\").addEventListener(\"click\", sizesTabClick)\n        document.getElementById(\"breads\").addEventListener(\"click\", breadsTabClick)\n        document.getElementById(\"vegetables\").addEventListener(\"click\", vegetablesTabClick)\n        document.getElementById(\"sauces\").addEventListener(\"click\", saucesTabClick)\n        document.getElementById(\"fillings\").addEventListener(\"click\", fillingsTabClick)\n        document.getElementById(\"ready\").addEventListener(\"click\", readyTabClick)\n\n        document.getElementsByClassName(\"close-icon\")[0].addEventListener(\"click\", closeIconClick)\n\n        for (let key in this.ingredients[this.selectedModalTab]) {\n            const modalItemClick = () => {\n                const scrollPosition = document.getElementsByClassName(\"tab-content-block\")[0].scrollTop\n                if (this.selectedModalTab === \"sizes\" || this.selectedModalTab === \"breads\") {\n                    this.tabReadyContent[this.selectedModalTab] = this.ingredients[this.\n                        selectedModalTab][key].name;\n\n                    this.modalContent.price += this.ingredients[this.selectedModalTab][key].price;\n                    this.modalContent.price -= this.previousValues[this.selectedModalTab];\n\n                    this.previousValues[this.selectedModalTab] = this.\n                        ingredients[this.selectedModalTab][key].price;\n\n                    this.setTabReadyContent(this.tabReadyContent);\n                } else {\n                    if (this.tabReadyContent[this.selectedModalTab].includes(this.\n                        ingredients[this.selectedModalTab][key].name)) {\n                        let n = this.tabReadyContent[this.selectedModalTab].indexOf(this.\n                            ingredients[this.selectedModalTab][key].name);\n                        this.modalContent.price -= this.ingredients[this.selectedModalTab][key].price;\n                        this.tabReadyContent[this.selectedModalTab].splice(n, 1);\n                        this.setTabReadyContent(this.tabReadyContent);\n                    } else {\n                        this.tabReadyContent[this.selectedModalTab].push(this.ingredients[this.\n                            selectedModalTab][key].name)\n                        this.modalContent.price += this.ingredients[this.selectedModalTab][key].price;\n                        this.setTabReadyContent(this.tabReadyContent)\n                    }\n                }\n                document.getElementsByClassName(\"tab-content-block\")[0].scrollTo(0, scrollPosition)\n            }\n            document.getElementById(\"item-\" + key).addEventListener(\"click\", modalItemClick)\n        }\n\n        if (this.selectedModalTab === \"ready\") {\n            const handleModalPlusClick = () => {\n                this.modalContent.amount += 1;\n                this.setModalContent(this.modalContent);\n                this.countersValue[this.modalContent.id - 1] += 1;\n                this.setCountersValue(this.countersValue);\n            }\n            const handleModalMinusClick = () => {\n                if (this.modalContent.amount > 1) {\n                    this.modalContent.amount -= 1;\n                    this.setModalContent(this.modalContent);\n                    this.countersValue[this.modalContent.id - 1] -= 1;\n                    this.setCountersValue(this.countersValue);\n                }\n            }\n            const handleInputChange = () => {\n                this.modalContent.amount = parseInt(document.getElementById(\"counter-modal\").value);\n                this.setModalContent(this.modalContent);\n                this.countersValue[this.modalContent.id - 1] = parseInt(document.\n                    getElementById(\"counter-modal\").value);\n                this.setCountersValue(this.countersValue);\n            }\n\n            const handleButtonModalClick = () => {\n                this.setSelectedModalTab(\"sizes\");\n                if (this.modalWindowAddShow) {\n                    this.setModalWindowAddShow(false);\n                    this.setSandwichesLength(this.sandwichesLength + 1);\n\n                    this.sandwiches.push({\n                        id: this.modalContent.id,\n                        title: this.modalContent.title,\n                        amount: this.modalContent.amount,\n                        price: this.modalContent.price,\n                        sizes: this.tabReadyContent.sizes,\n                        breads: this.tabReadyContent.breads,\n                        vegetables: this.tabReadyContent.vegetables,\n                        sauces: this.tabReadyContent.sauces,\n                        fillings: this.tabReadyContent.fillings\n                    });\n\n                    this.orderItems.push({\n                        sandwichId: this.sandwiches.length,\n                        id: this.orderItems.length + 1,\n                        title: this.modalContent.title,\n                        amount: this.modalContent.amount,\n                        price: this.modalContent.price * this.modalContent.amount\n                    });\n                    this.setOrderItems(this.orderItems);\n                    this.setSandwiches(this.sandwiches);\n\n                    this.setTotalPrice(this.totalPrice + (this.modalContent.price * this.modalContent.amount));\n\n                    this.setTabReadyContent({\n                        sizes: \"15 См\",\n                        breads: \"Белый итальянский\",\n                        vegetables: [],\n                        sauces: [],\n                        fillings: []\n                    })\n                }\n                if (this.modalWindowEditShow) {\n                    this.setModalWindowEditShow(false);\n\n                    console.log(this.changeableOrderItem);\n                    this.sandwiches[this.changeableOrderItem.sandwichId] = {\n                        id: this.modalContent.id,\n                        title: this.modalContent.title,\n                        amount: this.modalContent.amount,\n                        price: this.modalContent.price,\n                        sizes: this.tabReadyContent.sizes,\n                        breads: this.tabReadyContent.breads,\n                        vegetables: this.tabReadyContent.vegetables,\n                        sauces: this.tabReadyContent.sauces,\n                        fillings: this.tabReadyContent.fillings\n                    };\n                    this.setSandwiches(this.sandwiches);\n\n                    let previousPrice = this.orderItems[this.changeableOrderItem.orderId].price;\n                    console.log(previousPrice);\n\n                    this.orderItems[this.changeableOrderItem.orderId].amount = this.modalContent.amount;\n                    this.orderItems[this.changeableOrderItem.orderId].price =\n                        this.modalContent.price * this.modalContent.amount;\n\n                    this.setTotalPrice(this.totalPrice + (this.modalContent.price * \n                        this.modalContent.amount) - previousPrice);\n                    this.setTabReadyContent({\n                        sizes: \"15 См\",\n                        breads: \"Белый итальянский\",\n                        vegetables: [],\n                        sauces: [],\n                        fillings: []\n                    })\n                }\n            }\n            document.getElementById(\"plus-modal\").addEventListener(\"click\", handleModalPlusClick)\n            document.getElementById(\"minus-modal\").addEventListener(\"click\", handleModalMinusClick)\n            document.getElementById(\"counter-modal\").addEventListener(\"change\", handleInputChange)\n            document.getElementById(\"button-modal\").addEventListener(\"click\", handleButtonModalClick)\n        }\n    }\n\n    loadIngredients() {\n        const ingredient = new Ingredient({\n            tabReadyContent: this.tabReadyContent\n        });\n        let items = \"\";\n\n        for (let key in this.ingredients[this.selectedModalTab]) {\n            items += ingredient.render(this.ingredients[this.selectedModalTab][key], key);\n        }\n\n        return items;\n    }\n\n    loadReadyPage() {\n        const content = /*html*/ `\n        <div class=\"image-block\">\n            <img class=\"result-image\" src=\"i/result_sandwich.jpg\">\n        </div>\n        <div class=\"final-order-block\">\n            <p class=\"final-order-ready\">Ваш сендвич готов!</p>\n        <div class=\"final-order-size\">\n            <p class=\"final-order-size-text\">Размер:</p>\n            <p class=\"final-order-size-value\">${this.tabReadyContent.sizes}</p>\n        </div>\n        <div class=\"final-order-bread\">\n            <p class=\"final-order-bread-text\">Хлеб:</p>\n            <p class=\"final-order-bread-value\">${this.tabReadyContent.breads}</p>\n        </div>\n        <div class=\"final-order-vegetables\">\n            <p class=\"final-order-vegetables-text\">Овощи:</p>\n            <p class=\"final-order-vegetables-value\">${this.tabReadyContent.vegetables.length === 0\n                ? \"Нет\" : this.tabReadyContent.vegetables}</p>\n        </div>\n        <div class=\"final-order-sauces\">\n            <p class=\"final-order-sauces-text\">Соусы:</p>\n            <p class=\"final-order-sauces-value\">${this.tabReadyContent.sauces.length === 0\n                ? \"Нет\" : this.tabReadyContent.sauces}</p>\n        </div>\n        <div class=\"final-order-filling\">\n            <p class=\"final-order-filling-text\">Начинка:</p>\n            <p class=\"final-order-filling-value\">${this.tabReadyContent.fillings.length === 0\n                ? \"Нет\" : this.tabReadyContent.fillings}</p>\n        </div>\n            <p class=\"final-order-title\" id=\"item-name-modal\">${this.modalContent.title}</p>\n        </div>\n        `\n        return content\n    }\n\n    loadModalOrder() {\n        return (/*html*/ `\n        <p class=\"item-amount\">Количество</p>\n        <div class=\"amount-block\">\n            <img class=\"minus-icon\" id=\"minus-modal\" src=\"i/minus.svg\">\n            <input class=\"item-counter\" type=\"text\" id=\"counter-modal\" value=${this.modalContent.amount}>\n            <img class=\"plus-icon\" id=\"plus-modal\" src=\"i/plus.svg\">\n        </div>\n        <button class=\"item-button\" id=\"button-modal\">${this.modalWindowAddShow ?\n                \"В КОРЗИНУ\" : (this.modalWindowEditShow ? \"ИЗМЕНИТЬ\" : [])}</button>\n        `)\n    }\n\n    render() {\n        let modalTabs = ``;\n        for (let i in this.tabs) {\n            modalTabs += `<p class=\"${this.selectedModalTab === i ? \"tab-active\" : \"tab\"}\"\n                id=\"${i}\">${this.tabs[i]}</p>`\n        }\n        return (/*html*/`\n        <div class=\"modal-window\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header-block\">\n                    <h3 class=\"modal-header\">Проверьте и добавьте в корзину</h3>\n                    <img class=\"close-icon\" src=\"i/close-icon.svg\"/>\n                </div>\n                <div class=\"modal-tabs-block\">\n                    <div class=\"modal-tabs\">\n                       ${modalTabs}\n                   </div>\n                </div>\n                <div class=\"arrows-block\">\n                </div>\n                <div class=\"tab-content-block\">\n                ${this.selectedModalTab === \"ready\" ? this.loadReadyPage() : this.loadIngredients()}\n                </div>\n                <div class=\"modal-footer\">\n                    <div class=\"item-price-block\">\n                        <p class=\"price-text\">Цена:</p>\n                        <p class=\"price-value\" id=\"price-modal\">${this.selectedModalTab === \"ready\" ?\n                this.modalContent.price * this.modalContent.amount : this.modalContent.price}</p>\n                        <p class=\"price-currency\">руб.</p>\n                    </div>\n                    <div class=\"modal-order-block\">\n                    ${this.selectedModalTab === \"ready\" ? this.loadModalOrder() : []}\n                    </div>\n                </div>\n            </div>\n        </div>\n        `)\n    }\n}\n\nexport default ModalWindow","import Component from \"./Component\"\n\nclass Order extends Component {\n    constructor(props) {\n        super()\n        this.orderItems = props.orderItems;\n        this.setOrderItems = props.setOrderItems;\n        this.totalPrice = props.totalPrice;\n        this.sandwiches = props.sandwiches;\n        this.modalContent = props.modalContent;\n        this.tabReadyContent = props.tabReadyContent;\n        this.modalWindowAddShow = props.modalWindowAddShow;\n        this.modalWindowEditShow = props.modalWindowEditShow;\n        this.changeableOrderItem = props.changeableOrderItem;\n\n        this.setChangeableOrderItem = props.setChangeableOrderItem;\n        this.setTabReadyContent = props.setTabReadyContent;\n        this.setModalContent = props.setModalContent;\n        this.setModalWindowAddShow = props.setModalWindowAddShow;\n        this.setModalWindowEditShow = props.setModalWindowEditShow;\n        this.setSandwiches = props.setSandwiches;\n        this.setTotalPrice = props.setTotalPrice;\n        this.setSelectedModalTab = props.setSelectedModalTab;\n    }\n\n    basketRender() {\n        let items = \"\"\n        this.orderItems.map((item) => {\n            items += /*html*/`\n                <div class=\"order-items\" id=\"order-${item.id}\">\n                    <p class=\"${item.sandwichId ? \"sandwich-title\" : \"order-title\"}\" \n                    id=\"${item.sandwichId ? \"sandwich-\" + item.sandwichId : []}\">${item.title}</p>\n                    <p class=\"order-amount\">${item.amount}</p>\n                    <p class=\"order-price\">${item.price} руб.</p>\n                    <img class=\"delete-icon\" id=\"delete-${item.id}\" src=\"i/trash.svg\"/>\n                </div>\n            `\n        })\n        return items\n    }\n\n    enable() {\n        for (let i = 0; i < this.orderItems.length; i++) {\n            const handleChangeDeleteIconClick = () => {\n                this.setTotalPrice(this.totalPrice - this.orderItems[i].price);\n                if (this.orderItems[i].sandwichId) {\n                    this.sandwiches.splice(this.orderItems[i].sandwichId - 1, 1);\n                }\n                this.orderItems.splice(i, 1);\n\n                let sandwichId = 1;\n                this.orderItems.map((item, i) => {\n                    item.id = i + 1;\n                    if (item.sandwichId) {\n                        item.sandwichId = sandwichId;\n                        sandwichId++;\n                    }\n                })\n                this.setSandwiches(this.sandwiches);\n                this.setOrderItems(this.orderItems);\n            }\n            document.getElementById(\"delete-\" + (i + 1)).addEventListener('click', handleChangeDeleteIconClick);\n        }\n        if (this.sandwiches.length > 0) {\n            for (let i = 0; i < this.sandwiches.length; i++) {\n                const handleOrderClick = () => {\n                    console.log(this.orderItems);\n                    this.changeableOrderItem.sandwichId = i;\n                    let id = this.orderItems.find(item => item.sandwichId ===\n                        this.changeableOrderItem.sandwichId + 1).id - 1;\n                    this.changeableOrderItem.orderId = id;\n                    console.log(this.changeableOrderItem);\n                    this.setChangeableOrderItem(this.changeableOrderItem)\n                    this.setSelectedModalTab(\"sizes\");\n                    this.setModalWindowEditShow(true);\n                    this.setTabReadyContent(this.sandwiches[i]);\n                    this.setModalContent(this.sandwiches[i]);\n                }\n                document.getElementById(\"sandwich-\" + (i + 1)).addEventListener(\"click\", handleOrderClick);\n            }\n        }\n    }\n\n    render() {\n        return (/*html*/`\n        <div class=\"order\">\n        <div class=\"order-head\">\n            <img class=\"basket-icon\" src=\"i/basket.svg\" />\n            <p class=\"head-title\">Корзина</p>\n        </div>\n        <div class=\"order-headers\">\n            <p class=\"title-header\">Название</p>\n            <p class=\"amount-header\">Кол-во</p>\n            <p class=\"price-header\">Цена</p>\n        </div>\n        <div class=\"order-items-block\">\n        ${this.basketRender()}\n        </div>\n        <div>\n            <div class=\"sum\">\n                <p class=\"sum-text\">Цена: </p>\n                <p class=\"sum-value\" id=\"sum\">${this.totalPrice}</p>\n                <p class=\"sum-currency\">руб.</p>\n            </div>\n        </div>\n        <button class=\"order-button\">ОФОРМИТЬ ЗАКАЗ</button>\n        </div>\n      `)\n    }\n}\n\nexport default Order","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Component from \"./Component\";\nimport MainHeader from \"./MainHeader\";\nimport MenuBlock from \"./MenuBlock\";\nimport MenuCategories from \"./MenuCategories\";\nimport ModalWindow from \"./ModalWindow\";\nimport Order from \"./Order\";\n\nclass App extends Component {\n    constructor(onChange) {\n        const data = {\n            selectedTab: \"sandwiches\",\n            selectedModalTab: \"sizes\",\n            items: [], // Пройтись по первой главе learnJs и выполнить все задачки\n            ingredients: [],\n            countersValue: [],\n            orderItems: [],\n            totalPrice: 0,\n            modalWindowAddShow: false,\n            modalWindowEditShow: false,\n            modalContent: {},\n            sandwichesLength: 0,\n            sandwiches: [],\n            changeableOrderItem: {\n                orderId: 0,\n                sandwichId: 0\n            },\n            tabReadyContent: {\n                sizes: \"15 См\",\n                breads: \"Белый итальянский\",\n                vegetables: [],\n                sauces: [],\n                fillings: []\n            },\n            previousValues: {\n                sizes: 0,\n                breads: 0\n            }\n        }\n        super(data)\n        super.setRerender(onChange)\n        this.onChange = onChange;\n        this.createChildren() // eslint + prettier\n\n        const getData = async () => {\n            await fetch(\"./src/data.json\")\n                .then(response => response.json())\n                .then(data => {\n                    data.menu.map(() => {\n                        this.data.countersValue.push(1)\n                    });\n                    this.data.items = data.menu;\n                    this.data.ingredients = {\n                        sizes: data.sizes,\n                        breads: data.breads,\n                        vegetables: data.vegetables,\n                        sauces: data.sauces,\n                        fillings: data.fillings\n                    }\n                })\n        }\n        getData();\n    }\n\n    createChildren() {\n        this.mainHeader = new MainHeader();\n        this.menuCategories = new MenuCategories({\n            selectedTab: this.data.selectedTab,\n            setSelectedTab: (x) => { this.data.selectedTab = x }\n        });\n        this.order = new Order({\n            orderItems: this.data.orderItems,\n            setOrderItems: (x) => { this.data.orderItems = x },\n            totalPrice: this.data.totalPrice,\n            setTotalPrice: (x) => { this.data.totalPrice = x },\n            sandwiches: this.data.sandwiches,\n            setSandwiches: (x) => { this.data.sandwiches = x },\n            modalWindowAddShow: this.data.modalWindowAddShow,\n            setModalWindowAddShow: (x) => { this.data.modalWindowAddShow = x },\n            modalWindowEditShow: this.data.modalWindowEditShow,\n            setModalWindowEditShow: (x) => { this.data.modalWindowEditShow = x },\n            modalContent: this.data.modalContent,\n            setModalContent: (x) => { this.data.modalContent = x },\n            setSelectedModalTab: (x) => { this.data.selectedModalTab = x },\n            tabReadyContent: this.data.tabReadyContent,\n            setTabReadyContent: (x) => { this.data.tabReadyContent = x },\n            changeableOrderItem: this.data.changeableOrderItem,\n            setChangeableOrderItem: (x) => { this.data.changeableOrderItem = x }\n        });\n        this.menuBlock = new MenuBlock({\n            items: this.data.items,\n            selectedTab: this.data.selectedTab,\n            countersValue: this.data.countersValue,\n            setCountersValue: (x) => { this.data.countersValue = x },\n            orderItems: this.data.orderItems,\n            setOrderItems: (x) => { this.data.orderItems = x },\n            totalPrice: this.data.totalPrice,\n            setTotalPrice: (x) => { this.data.totalPrice = x },\n            setModalWindowAddShow: (x) => { this.data.modalWindowAddShow = x },\n            setModalContent: (x) => { this.data.modalContent = x },\n            setSelectedModalTab: (x) => { this.data.selectedModalTab = x },\n        });\n        this.modalWindow = new ModalWindow({\n            modalWindowAddShow: this.data.modalWindowAddShow,\n            setModalWindowAddShow: (x) => { this.data.modalWindowAddShow = x },\n            modalWindowEditShow: this.data.modalWindowEditShow,\n            setModalWindowEditShow: (x) => { this.data.modalWindowEditShow = x },\n            selectedModalTab: this.data.selectedModalTab,\n            setSelectedModalTab: (x) => { this.data.selectedModalTab = x },\n            ingredients: this.data.ingredients,\n            modalContent: this.data.modalContent,\n            setModalContent: (x) => { this.data.modalContent = x },\n            tabReadyContent: this.data.tabReadyContent,\n            setTabReadyContent: (x) => { this.data.tabReadyContent = x },\n            previousValues: this.data.previousValues,\n            setPreviousValues: (x) => { this.data.previousValues = x },\n            countersValue: this.data.countersValue,\n            setCountersValue: (x) => { this.data.countersValue = x },\n            orderItems: this.data.orderItems,\n            setOrderItems: (x) => { this.data.orderItems = x },\n            totalPrice: this.data.totalPrice,\n            setTotalPrice: (x) => { this.data.totalPrice = x },\n            sandwichesLength: this.data.sandwichesLength,\n            setSandwichesLength: (x) => { this.data.sandwichesLength = x },\n            sandwiches: this.data.sandwiches,\n            setSandwiches: (x) => { this.data.sandwiches = x },\n            changeableOrderItem: this.data.changeableOrderItem,\n            setChangeableOrderItem: (x) => { this.data.changeableOrderItem = x }\n        });\n    }\n\n    enable() {\n        this.menuCategories.enable();\n        this.menuBlock.enable();\n        this.order.enable();\n        if (this.data.modalWindowAddShow || this.data.modalWindowEditShow) {\n            this.modalWindow.enable();\n        }\n    }\n\n    render() {\n        this.createChildren();\n        return (/*html*/`\n        ${this.mainHeader.render()}\n        <div class=\"main-form\">\n            <div class=\"categories_and_orders-block\">\n                ${this.menuCategories.render()}\n                ${this.order.render()}\n            </div>\n            ${this.menuBlock.render()}\n        </div>\n        ${this.data.modalWindowAddShow || this.data.modalWindowEditShow ? this.modalWindow.render() : []}\n        `)\n    }\n}\n\nexport default App;\n\nconst rerenderApp = () => {\n    document.body.innerHTML = app.render();\n    app.enable();\n}\n\nconst app = new App(\n    rerenderApp\n);"],"names":[],"sourceRoot":""}